#!/usr/bin/env perl
#
# Edit the target of a symbolic link.
#
# Example:
#  relink 's/old/new/' foo
#

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = <<EOF;
usage: $THIS perlexpr files
EOF

my $QUIET;
my $FORCE;
my $DRYRUN;

Getopt::Long::config("bundling");
GetOptions
("quiet|q" => \$QUIET,
 #
 # Be quiet about certain errors.
 #

 "force|f" => \$FORCE,
 #
 # Update the symlink even if it doesn't seem to have changed.
 #
 # For example, use:
 #
 #  relink --force 1 $files
 #
 # to update the owner, group and other inode fields.
 #

 "dry-run|n" => \$DRYRUN,
 #
 # Don't actually change any links.
 #
)
or die $USAGE;

my $exit = 0;

@ARGV > 1 or die $USAGE;
my $OP = shift;

for my $arg (@ARGV)
{
    $_ = readlink $arg;
    unless (defined $_)
    {
	my $e = $!;
	$e = "Not a symbolic link"
	    if $e eq "Invalid argument";
	warn "readlink '$arg': $e"
	    unless $QUIET;
	$exit = 1;
	next;
    }
    my $was = $_;
    eval $OP;
    die $@ if $@;
    if ($was eq $_ && ! $FORCE)
    {
	print "$arg: $_ (unchanged)\n";
	next;
    }
    unless ($DRYRUN)
    {
	unless (unlink $arg)
	{
	    warn "unlink '$arg': $!";
	    $exit = 1;
	    next;
	}
	unless (symlink $_, $arg)
	{
	    warn "symlink '$arg': $!";
	    $exit = 1;
	    next;
	}
    }
    print "$arg: $was => $_\n";
}
exit $exit;
